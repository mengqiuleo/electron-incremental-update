import type { IProvider } from '../provider'
import type { UpdateInfo } from '../utils/version'

export type ErrorInfo =
  | 'ERR_DOWNLOAD'
  | 'ERR_VALIDATE'
  | 'ERR_PARAM'
  | 'ERR_NETWORK'

export type UnavailableInfo =
  | 'UNAVAILABLE_ERROR'
  | 'UNAVAILABLE_DEV'
  | 'UNAVAILABLE_VERSION'

export class UpdaterError extends Error {
  public code: ErrorInfo
  constructor(msg: ErrorInfo, info: string) {
    super(`[${msg}] ${info}`)
    this.code = msg
  }
}

export interface Logger {
  info: (msg: string) => void
  debug: (msg: string) => void
  warn: (msg: string) => void
  error: (msg: string, e?: unknown) => void
}

export interface UpdaterOption {
  /**
   * Update provider
   *
   * If you will not setup `UpdateJSON` or `Buffer` in params when checking update or download, this option is **required**
   */
  provider?: IProvider
  /**
   * Certifaction key of signature, which will be auto generated by plugin,
   * generate by `selfsigned` if not set
   */
  SIGNATURE_CERT?: string
  /**
   * Whether to receive beta update
   */
  receiveBeta?: boolean
  /**
   * Updater logger
   */
  logger?: Logger
}

export type UpdateInfoWithURL = UpdateInfo & { url: string }

export type UpdateInfoWithExtraVersion = UpdateInfo & {
  appVersion: string
  entryVersion: string
}
