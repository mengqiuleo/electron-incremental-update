import type { IProvider } from '../provider'

export const ErrorInfo = {
  download: 'Download Failed',
  validate: 'Validate Failed',
  param: 'Missing Params',
  network: 'Network Error',
} as const

export class UpdaterError extends Error {
  public code: keyof typeof ErrorInfo
  constructor(msg: keyof typeof ErrorInfo, info: string) {
    super('[' + ErrorInfo[msg] + '] ' + info)
    this.code = msg
  }
}

export interface Logger {
  info: (msg: string) => void
  debug: (msg: string) => void
  warn: (msg: string) => void
  error: (msg: string, e?: unknown) => void
}

export interface UpdaterOption {
  /**
   * Update provider
   *
   * If you will not setup `UpdateJSON` or `Buffer` in params when checking update or download, this option is **required**
   */
  provider?: IProvider
  /**
   * Certifaction key of signature, which will be auto generated by plugin,
   * generate by `selfsigned` if not set
   */
  SIGNATURE_CERT?: string
  /**
   * Whether to receive beta update
   */
  receiveBeta?: boolean
  /**
   * Updater logger
   */
  logger?: Logger
}
